{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1SAk6FRWopdYhuJMJpTl7tmmF-GY0M-bT","timestamp":1758126027396}],"authorship_tag":"ABX9TyP2iLS1Tl9hvyGB7kRgjuhJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zAbmLb5XosEC","executionInfo":{"status":"ok","timestamp":1758112123201,"user_tz":0,"elapsed":62,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"d7067536-2802-4144-bb75-913e46d4f8f8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Array: [ 77  20   1  43  72  26  84  31  45  59 100  36  45  53   6   6  88  33\n","  61  36]\n","Moyenne: 46.1\n","Médiane: 44.0\n","Écart-type: 27.486178344760845\n"]}],"source":["import numpy as np\n","\n","arr1 = np.random.randint(0, 101, 20)\n","print(\"Array:\", arr1)\n","print(\"Moyenne:\", np.mean(arr1))\n","print(\"Médiane:\", np.median(arr1))\n","print(\"Écart-type:\", np.std(arr1))"]},{"cell_type":"code","source":[],"metadata":{"id":"vPtz1wXUo2qA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","import numpy as np\n","arr2 = np.arange(20)\n","arr2=arr2+2\n","print(\"5 premiers:\", arr2[:5])\n","print(\"Éléments pairs:\", arr2[arr2 % 2 == 0])\n","print(\"valeur pas de 3:\", arr2[::3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"llBJreMVo3MU","executionInfo":{"status":"ok","timestamp":1758117585282,"user_tz":0,"elapsed":20,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"17c159a7-10e6-4082-d8c6-e3f2d02df55f"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["5 premiers: [2 3 4 5 6]\n","Éléments pairs: [ 2  4  6  8 10 12 14 16 18 20]\n","valeur pas de 3: [ 2  5  8 11 14 17 20]\n"]}]},{"cell_type":"code","source":["print(arr2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iSR8FgDU8jD3","executionInfo":{"status":"ok","timestamp":1758117420159,"user_tz":0,"elapsed":33,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"8fbf6075-9e2c-4e04-bb75-0809b6f7d6ea"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n"]}]},{"cell_type":"code","source":["arr7 = np.arange(12)\n","mat7 = arr7.reshape(3, 4)\n","print(\"Matrice 3x4:\\n\", mat7)\n","print(\"Aplatie:\", mat7.flatten())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"flAmyTPvpI6M","executionInfo":{"status":"ok","timestamp":1758112131873,"user_tz":0,"elapsed":298,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"dc7ed10b-5e34-462a-e946-28b65b5775d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Matrice 3x4:\n"," [[ 0  1  2  3]\n"," [ 4  5  6  7]\n"," [ 8  9 10 11]]\n","Aplatie: [ 0  1  2  3  4  5  6  7  8  9 10 11]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Xq8zCAjCpNZk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"g9retElDpOCF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = np.array([1, 2, 3,4,5,6])\n","b = np.array([4, 5, 6])\n","a=a.reshape(2, 3)\n","print(\"Concat horizontal:\", np.hstack((a, b)))\n","print(\"Concat vertical:\\n\", np.vstack((a, b)))\n","\n","arr8 = np.arange(9)\n","print(\"Découpage en 3 parties:\", np.split(arr8, 3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":803},"id":"zH2LJQgspSIn","executionInfo":{"status":"error","timestamp":1758118268758,"user_tz":0,"elapsed":98,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"043c5575-469b-47fa-d429-cf537bed9a01"},"execution_count":17,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-3469141993.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Concat horizontal:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Concat vertical:\\n\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.12/dist-packages/numpy/_core/shape_base.py\u001b[0m in \u001b[0;36mhstack\u001b[0;34m(tup, dtype, casting)\u001b[0m\n\u001b[1;32m    356\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcasting\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 358\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcasting\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)"]}]},{"cell_type":"code","source":["A = np.random.randint(0, 10, (3, 3))\n","B = np.random.randint(0, 10, (3, 3))\n","print(\"A:\\n\", A)\n","print(\"B:\\n\", B)\n","print(\"Produit matriciel:\\n\", np.dot(A, B))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ETAhJChpTr_","executionInfo":{"status":"ok","timestamp":1758112141167,"user_tz":0,"elapsed":50,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"e86a463f-385e-41e4-91a4-e6f24cc65150"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A:\n"," [[9 8 7]\n"," [4 2 9]\n"," [3 0 8]]\n","B:\n"," [[6 2 8]\n"," [8 4 8]\n"," [6 2 7]]\n","Produit matriciel:\n"," [[160  64 185]\n"," [ 94  34 111]\n"," [ 66  22  80]]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"8m-Bxo5po6FR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mat = np.arange(9).reshape(3, 3)\n","print(\"Matrice:\\n\", mat)\n","print(\"Transposée:\\n\", mat.T)\n","try:\n","    inv = np.linalg.inv(mat)\n","    print(\"Inverse:\\n\", inv)\n","except np.linalg.LinAlgError:\n","    print(\"La matrice n’est pas inversible.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ObOceIvCo6-j","executionInfo":{"status":"ok","timestamp":1758112145811,"user_tz":0,"elapsed":43,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"22fdf02e-c345-4531-f6da-5285bd8f4846"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Matrice:\n"," [[0 1 2]\n"," [3 4 5]\n"," [6 7 8]]\n","Transposée:\n"," [[0 3 6]\n"," [1 4 7]\n"," [2 5 8]]\n","La matrice n’est pas inversible.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"awX_4uyTo9zQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["arr4 = np.random.randint(-10, 11, 100)\n","positifs = arr4[arr4 > 0]\n","print(\"Valeurs > 0:\", positifs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PGDoR_Nvo-Qk","executionInfo":{"status":"ok","timestamp":1758112149759,"user_tz":0,"elapsed":36,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"59b8dd6a-882e-4013-f1a9-2ac3c6833416"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Valeurs > 0: [ 8  3  7  5  5  9  7  7  3  3 10  5  5  5  3  8  6  7 10  1  2  5  7  3\n","  8  3  4 10  9  2  3  5  5  4  3  9  8  9  8  3  8 10  5  3  3  4  5  2\n","  6]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"r5mSF420pBOS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["notes = np.random.randint(0, 21, 30)  # notes entre 0 et 20\n","print(\"Notes:\", notes)\n","print(\"Max:\", np.max(notes))\n","print(\"Min:\", np.min(notes))\n","print(\"Moyenne:\", np.mean(notes))\n","print(\"Écart-type:\", np.std(notes))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zf_o5xAhpB-3","executionInfo":{"status":"ok","timestamp":1758112153042,"user_tz":0,"elapsed":36,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"6b80833b-d99c-435c-be6d-3a30734d2179"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Notes: [17 11  1 17  1  8 12  8 18 17  2  4  9  6 15  2  0  0  3  7 15 12 20  9\n"," 17 17 18  4 17  2]\n","Max: 20\n","Min: 0\n","Moyenne: 9.633333333333333\n","Écart-type: 6.549724336862499\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# 1. Créer et manipuler des arrays\n","arr1 = np.random.randint(0, 101, 20)\n","print(\"Array:\", arr1)\n","print(\"Moyenne:\", np.mean(arr1))\n","print(\"Médiane:\", np.median(arr1))\n","print(\"Écart-type:\", np.std(arr1))\n","\n","# 2. Indexation et slicing\n","arr2 = np.arange(20)\n","print(\"5 premiers:\", arr2[:5])\n","print(\"Éléments pairs:\", arr2[arr2 % 2 == 0])\n","print(\"Indices multiples de 3:\", arr2[::3])\n","\n","# 3. Matrices et opérations\n","mat = np.arange(9).reshape(3, 3)\n","print(\"Matrice:\\n\", mat)\n","print(\"Transposée:\\n\", mat.T)\n","try:\n","    inv = np.linalg.inv(mat)\n","    print(\"Inverse:\\n\", inv)\n","except np.linalg.LinAlgError:\n","    print(\"La matrice n’est pas inversible.\")\n","\n","# 4. Masques et filtrage\n","arr4 = np.random.randint(-10, 11, 100)\n","positifs = arr4[arr4 > 0]\n","print(\"Valeurs > 0:\", positifs)\n","\n","# 5. Opérations vectorisées (y = 2x^2 + 3x + 5)\n","x = np.linspace(-10, 10, 100)\n","y = 2*x**2 + 3*x + 5\n","print(\"y:\", y)\n","\n","# 6. Statistiques sur notes\n","notes = np.random.randint(0, 21, 30)  # notes entre 0 et 20\n","print(\"Notes:\", notes)\n","print(\"Max:\", np.max(notes))\n","print(\"Min:\", np.min(notes))\n","print(\"Moyenne:\", np.mean(notes))\n","print(\"Écart-type:\", np.std(notes))\n","\n","# 7. Reshape et flatten\n","arr7 = np.arange(12)\n","mat7 = arr7.reshape(3, 4)\n","print(\"Matrice 3x4:\\n\", mat7)\n","print(\"Aplatie:\", mat7.flatten())\n","\n","# 8. Concaténation et split\n","a = np.array([1, 2, 3])\n","b = np.array([4, 5, 6])\n","print(\"Concat horizontal:\", np.hstack((a, b)))\n","print(\"Concat vertical:\\n\", np.vstack((a, b)))\n","arr8 = np.arange(9)\n","print(\"Découpage en 3 parties:\", np.split(arr8, 3))\n","\n","# 9. Génération loi normale\n","arr9 = np.random.normal(50, 10, 1000)\n","print(\"Moyenne:\", np.mean(arr9))\n","print(\"Écart-type:\", np.std(arr9))\n","\n","# 10. Produit matriciel\n","A = np.random.randint(0, 10, (3, 3))\n","B = np.random.randint(0, 10, (3, 3))\n","print(\"A:\\n\", A)\n","print(\"B:\\n\", B)\n","print(\"Produit matriciel:\\n\", np.dot(A, B))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J3ZqmaY3ppZM","executionInfo":{"status":"ok","timestamp":1758112184373,"user_tz":0,"elapsed":57,"user":{"displayName":"Ndeye Dibor Dione","userId":"17741656664707613040"}},"outputId":"33155dd7-7367-4e3f-8151-ee24673185f6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Array: [19 34 49 14 66 98 68 29 68 89 54 61 91 59 48 14 12 71 94 95]\n","Moyenne: 56.65\n","Médiane: 60.0\n","Écart-type: 28.14653619897127\n","5 premiers: [0 1 2 3 4]\n","Éléments pairs: [ 0  2  4  6  8 10 12 14 16 18]\n","Indices multiples de 3: [ 0  3  6  9 12 15 18]\n","Matrice:\n"," [[0 1 2]\n"," [3 4 5]\n"," [6 7 8]]\n","Transposée:\n"," [[0 3 6]\n"," [1 4 7]\n"," [2 5 8]]\n","La matrice n’est pas inversible.\n","Valeurs > 0: [ 6  5  3  8  6  5 10  4  2  6  6  8  6  7  8  2 10  6 10  4  7  6  6 10\n","  2  6  7  1  7  7  7  7  8  5  8 10  5  5 10  2  7  3  1  5  8  1  9  8\n","  6  7  3  1  4  9  6]\n","y: [175.         167.60687685 160.37700235 153.31037649 146.40699929\n"," 139.66687073 133.08999082 126.67635956 120.42597694 114.33884298\n"," 108.41495766 102.65432099  97.05693297  91.62279359  86.35190287\n","  81.24426079  76.29986736  71.51872258  66.90082645  62.44617896\n","  58.15478012  54.02662994  50.0617284   46.2600755   42.62167126\n","  39.14651566  35.83460871  32.68595041  29.70054076  26.87837976\n","  24.2194674   21.72380369  19.39138863  17.22222222  15.21630446\n","  13.37363534  11.69421488  10.17804306   8.82511989   7.63544536\n","   6.60901949   5.74584226   5.04591368   4.50923375   4.13580247\n","   3.92561983   3.87868585   3.99500051   4.27456382   4.71737578\n","   5.32343638   6.09274564   7.02530354   8.12111009   9.38016529\n","  10.80246914  12.38802163  14.13682277  16.04887256  18.124171\n","  20.36271809  22.76451383  25.32955821  28.05785124  30.94939292\n","  34.00418325  37.22222222  40.60350985  44.14804612  47.85583104\n","  51.72686461  55.76114682  59.95867769  64.3194572   68.84348536\n","  73.53076217  78.38128762  83.39506173  88.57208448  93.91235588\n","  99.41587593 105.08264463 110.91266197 116.90592797 123.06244261\n"," 129.3822059  135.86521783 142.51147842 149.32098765 156.29374554\n"," 163.42975207 170.72900724 178.19151107 185.81726354 193.60626467\n"," 201.55851444 209.67401286 217.95275992 226.39475564 235.        ]\n","Notes: [ 2  6  0 17  3  8 18  2 11  5 20 20 20  2 19  5 15 13 10 10  5 15  0 13\n"," 16 10  6 14 14 16]\n","Max: 20\n","Min: 0\n","Moyenne: 10.5\n","Écart-type: 6.354788220966403\n","Matrice 3x4:\n"," [[ 0  1  2  3]\n"," [ 4  5  6  7]\n"," [ 8  9 10 11]]\n","Aplatie: [ 0  1  2  3  4  5  6  7  8  9 10 11]\n","Concat horizontal: [1 2 3 4 5 6]\n","Concat vertical:\n"," [[1 2 3]\n"," [4 5 6]]\n","Découpage en 3 parties: [array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]\n","Moyenne: 49.577664592154875\n","Écart-type: 9.930666624198132\n","A:\n"," [[6 0 0]\n"," [8 1 1]\n"," [9 6 7]]\n","B:\n"," [[4 1 6]\n"," [0 0 8]\n"," [2 3 2]]\n","Produit matriciel:\n"," [[ 24   6  36]\n"," [ 34  11  58]\n"," [ 50  30 116]]\n"]}]}]}